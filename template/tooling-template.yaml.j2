apiVersion: v1
kind: Template
metadata:
  name: tooling
labels:
  template: tooling
  group: tooling
metadata:
  annotations:
    description: Creates a Tooling Infrastructure for LATAM Red Hat Forum 2016
    iconClass: icon-jenkins
    tags: jenkins,gogs,nexus
  name: tooling
message: Tooling infrastructure composed of Jenkins, Gogs and services has been created in your project.  Jenkins username/password are admin/${JENKINS_PASSWORD} and Gogs username/password are {{ username }}/{{ password }}.  Instructions on how to use it are https://github.com/latem-tech-office/[PENDING]
parameters:
- description: Password for the Jenkins user.
  displayName: Jenkins Password
  value: password
  name: JENKINS_PASSWORD
  required: true
- description: Password for the Gogs user.
  displayName: Gogs Password
  value: password
  name: GOGS_PASSWORD
  required: true
- description: Username for PostgreSQL backend
  displayName: PostgreSQL User
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for Gogs Git Server PostgreSQL backend
  displayName: Gogs' PostgreSQL Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: GOGS_POSTGRESQL_PASSWORD
  required: true
objects:
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: tooling
      name: tooling
    name: forum-pipeline
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node {
           stage 'Build'
                git url: 'http://gogs:3000/demo/brms.git'
                def mvnHome = tool 'M3'
                def javaHome = tool 'jdk8'
 
           stage 'Test'
                sh "${mvnHome}/bin/mvn clean test -f discountRules/pom.xml"
           stage 'Deploy'
                def ocCmd = "/usr/bin/oc --token=`cat /var/run/secrets/kubernetes.io/serviceaccount/token` --server=https://openshift.default.svc.cluster.local --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                sh "${ocCmd} start-build bc/brms -n test5 --follow"
          }
      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
# Jenkins Master
- apiVersion: v1
  kind: Route
  metadata:
    name: jenkins
  spec:
    host: jenkins.{{ openshift_domain_cloudapps }}
    port:
      targetPort: web    
    to:
      kind: Service
      name: jenkins
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: jenkins
  spec:
    replicas: 1
    selector:
      name: jenkins
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: jenkins
      spec:
        containers:
        - capabilities: {}
          env:
          - name: JENKINS_PASSWORD
            value: ${JENKINS_PASSWORD}
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: "true"
          - name: JNLP_SERVICE_NAME
            value: jenkins-jnlp
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 120
            timeoutSeconds: 3
          name: jenkins
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: 1Gi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: jenkins-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - emptyDir:
            medium: ""
          name: jenkins-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - jenkins
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_edit
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: default
- apiVersion: v1
  kind: Service
  metadata:
    name: jenkins-jnlp
    labels:
      app: jenkins
  spec:
    ports:
    - name: agent
      nodePort: 0
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "jenkins-jnlp", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    creationTimestamp: null
    name: jenkins
    labels:
      app: jenkins
  spec:
    portalIP: ""
    ports:
    - name: web
      nodePort: 0
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
# Sonatype Nexus
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Sonatype Nexus repository manager's http port
    labels:
      name: nexus
    name: nexus
  spec:
    ports:
    - name: web
      port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      name: nexus
      deploymentconfig: nexus
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      name: nexus
    name: nexus
  spec:
    host: nexus.{{ openshift_domain_cloudapps }}
    port:
      targetPort: web
    port:
      targetPort: web
    to:
      kind: Service
      name: nexus
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      name: nexus
    name: nexus
  spec:
    tags:
    - annotations:
        description: The Nexus Docker image
        tags: nexus
      from:
        kind: DockerImage
        name: openshiftdemos/nexus:2.13.0-01
      importPolicy: {}
      name: "2.13.0-01"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      name: nexus
    name: nexus
  spec:
    replicas: 1
    selector:
      name: nexus
      deploymentconfig: nexus
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: nexus
          deploymentconfig: nexus
      spec:
        containers:
        - image: ' '
          imagePullPolicy: IfNotPresent
          name: nexus
          ports:
          - containerPort: 8081
            protocol: TCP
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 8081
              path: /content/groups/public
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 8081
              path: /content/groups/public
            timeoutSeconds: 5
          resources:
            limits:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /opt/nexus-work
            name: nexus-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: nexus-data
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - nexus
        from:
          kind: ImageStreamTag
          name: nexus:2.13.0-01
      type: ImageChange
  status: {}
# Gogs
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The Gogs server's http port
      service.alpha.openshift.io/dependencies: '[{"name": "postgresql-gogs", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    labels:
      name: gogs
    name: gogs
  spec:
    ports:
    - name: web
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      name: gogs
      deploymentconfig: gogs
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: postgresql-gogs
    labels:
      name: gogs
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: gogs
      deploymentconfig: postgresql-gogs
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: Route for gogs's http service.
    name: gogs
    labels:
      name: gogs
  spec:
    host: gogs.{{ openshift_domain_cloudapps }}
    to:
      kind: Service
      name: gogs
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: gogs
    labels:
      name: gogs
  spec:
    tags:
    - annotations:
        description: The Gogs git server docker image
        tags: gogs,go,golang
        version: "latest"
      from:
        kind: DockerImage
        name: openshiftdemos/gogs:latest
      importPolicy: {}
      name: "latest"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      name: gogs
    name: gogs
  spec:
    replicas: 1
    selector:
      name: gogs
      deploymentconfig: gogs
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: gogs
          deploymentconfig: gogs
      spec:
        containers:
        - image: " "
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
          name: gogs
          ports:
          - containerPort: 3000
            protocol: TCP
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - gogs
        from:
          kind: ImageStreamTag
          name: gogs:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      name: gogs
      deploymentconfig: postgresql-gogs
    name: postgresql-gogs
  spec:
    replicas: 1
    selector:
      name: gogs
      deploymentconfig: postgresql-gogs
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          name: gogs
          deploymentconfig: postgresql-gogs
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${GOGS_POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: gogs
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: postgresql-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status: {}
