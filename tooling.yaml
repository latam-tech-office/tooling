#!/usr/bin/env ansible-playbook
---
- name: Tooling{{ ":" }} LATAM Red Hat Forum 2016
  hosts: localhost
  connection: local
  vars:
     openshift_master: https://master.example.com:8443
     openshift_domain: example.com
     openshift_domain_cloudapps: cloudapps.{{ openshift_domain }}
     username: demo
     password: r3dh4t1!
     tooling_namespace: tooling
     gogs_url: http://gogs.{{ openshift_domain_cloudapps }} 
  tasks: 
     - name: Delete any existing namespaces 
       command: oc delete project {{ tooling_namespace }} 
       ignore_errors: True
       tags: create

     - name: Creating the Project{{ ':' }} {{ tooling_namespace }} 
       command: oadm new-project {{ tooling_namespace }} --display-name="Tooling{{ ":" }} LATAM Red Hat Forum 2016" --admin={{ username }} 
       register: create_namespace
       until: create_namespace.rc == 0
       retries: 10
       delay: 10
       tags: create

     - name: Generate a OpenShift's Template based on the variables defined in this playbook
       template: src=template/tooling-template.yaml.j2 dest=/tmp/tooling-template.yaml
       tags: create

     - name: Creating all the necessary applications based on a OpenShift's template
       command: oc new-app --file=/tmp/tooling-template.yaml --param=JENKINS_PASSWORD={{ password }} --namespace {{ tooling_namespace }} 
       tags: create

     - name: Fetch Gogs's IP Address
       command: oc get service/gogs --output jsonpath='{..spec.clusterIP}' --namespace {{ tooling_namespace }}
       register: gogs_ip
       tags: 
          - create
          - gogs

     - name: Fetch Gogs's Port Address
       command: oc get service/gogs --output jsonpath='{..spec.ports[?(@.name=="web")].port}' --namespace {{ tooling_namespace }}
       register: gogs_port      
       tags: 
          - create
          - gogs

     - name: Define what gogs's IP and port show able to test it
       set_fact: gogs_address="http{{ ':' }}//{{ gogs_ip.stdout }}{{ ':' }}{{ gogs_port.stdout }}"
       tags: 
          - create
          - gogs

     - debug: var=gogs_address
       tags: 
          - create
          - gogs

     - name: Wait for Gogs to be ready{{ ":" }} {{ gogs_address }}
       uri: url="{{ gogs_address }}" status_code=200 
       register: gogs_wait
       until: gogs_wait.status == 200
       retries: 60
       delay: 10
       tags: install

     - name: Retrieving Gogs Database's Username
       command: oc get deploymentconfig/postgresql-gogs -o jsonpath="{.spec.template.spec.containers[*].env[?(@.name==\"POSTGRESQL_USER\")].value}" --namespace {{ tooling_namespace }}
       register: gogs_database_username
       tags: install

     - name: Retrieving Gogs Database's Password
       command: oc get deploymentconfig/postgresql-gogs -o jsonpath="{.spec.template.spec.containers[*].env[?(@.name==\"POSTGRESQL_PASSWORD\")].value}" --namespace {{ tooling_namespace }}
       register: gogs_database_password
       tags: install

     - name: Retrieving Gogs Database's Name
       command: oc get deploymentconfig/postgresql-gogs -o jsonpath="{.spec.template.spec.containers[*].env[?(@.name==\"POSTGRESQL_DATABASE\")].value}" --namespace {{ tooling_namespace }}
       register: gogs_database_name
       tags: install

     - name: Retrieving Gogss Database's IP
       command: oc get service/postgresql-gogs --output template --template "{{ '{{' }}.spec.clusterIP{{ '}}' }}" --namespace {{ tooling_namespace }}
       register: gogs_database_ip
       tags: install

     - name: Retrieving Gog's Port Number
       command: oc get service/postgresql-gogs --output jsonpath="{.spec.ports.*.port}" --namespace {{ tooling_namespace }}
       register: gogs_database_port
       tags: install
     
     - name: Installing Gogs for the very first time
       uri: method=POST HEADER_Content-type="application/x-www-form-urlencoded" url="{{ gogs_address }}/install"
            body="db_type={{ "PostgreSQL" | urlencode }}&db_host={{ gogs_database_ip.stdout | urlencode }}%3A{{ gogs_database_port.stdout }}&db_user={{ gogs_database_username.stdout }}&db_passwd={{ gogs_database_password.stdout }}&db_name={{ gogs_database_name.stdout | urlencode }}&ssl_mode=disable&db_path=data%2Fgogs.db&app_name={{ "Gogs Go Git Service" | urlencode }}&repo_root_path={{ "/home/gogs/gogs-repositories" | urlencode }}&run_user=gogs&domain=localhost&ssh_port=22&http_port=3000&app_url={{ gogs_url | urlencode }}&log_root_path=%2Fopt%2Fgogs%2Flog&admin_name={{ username | urlencode }}&admin_passwd={{ password | urlencode }}&admin_confirm_passwd={{ password | urlencode }}&admin_email={{ "admin@gogs.com" | urlencode }}"
       register: result_install
       failed_when: result_install.status != 302
       tags: install

     - name: Import into BRMS Content
       uri: method=POST body_format=json url={{ gogs_address }}/api/v1/repos/migrate
            user={{ username }} password={{ password }} force_basic_auth=yes
            body="{\"clone_addr\"{{ ":" }}\"https{{ ":" }}//github.com/pstlatam/rhforum2016brms.git\",\"uid\"{{ ":" }} 1,\"repo_name\"{{ ":" }} \"brms\"}"
       register: json_result
       failed_when: 
              - json_result.status != 201
              - json_result.status != 504
       tags: 
          - install
          - installbrms

     - name: Import into Forum Content
       uri: method=POST body_format=json url={{ gogs_address }}/api/v1/repos/migrate
            user={{ username }} password={{ password }} force_basic_auth=yes
            body="{\"clone_addr\"{{ ":" }}\"https{{ ":" }}//github.com/pstlatam/rhforum2016.git\",\"uid\"{{ ":" }} 1,\"repo_name\"{{ ":" }} \"forum\"}"
       register: json_result
       failed_when: 
              - json_result.status != 201
              - json_result.status != 504
       tags: 
          - install
          - installforum

     - name: Add a WebHook to Jenkins
       uri: method=POST body_format=json url="{{ gogs_address }}/api/v1/repos/{{ username }}/brms/hooks"
            user={{ username }} password={{ password }} force_basic_auth=yes
            body="{\"type\"{{ ":" }}\"gogs\",\"config\"{{ ":" }}{\"url\"{{ ":" }}\"http://admin:{{ password }}@jenkins:80/job/forum-pipeline/build?delay=0sec\",\"content_type\"{{ ":" }}\"json\"},\"events\"{{ ":" }}[\"push\"],\"active\"{{ ":" }}true}"
       register: json_result
       failed_when: json_result.status != 201
       tags: 
          - install
          - installwebhook
